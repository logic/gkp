// generated by jsonenums -type=FormFieldType,LoginSearchType; DO NOT EDIT

package keepassrpc

import (
	"encoding/json"
	"fmt"
)

var (
	_LoginSearchTypeNameToValue = map[string]LoginSearchType{
		"LSTall":      LSTall,
		"LSTnoForms":  LSTnoForms,
		"LSTnoRealms": LSTnoRealms,
	}

	_LoginSearchTypeValueToName = map[LoginSearchType]string{
		LSTall:      "LSTall",
		LSTnoForms:  "LSTnoForms",
		LSTnoRealms: "LSTnoRealms",
	}
)

func init() {
	var v LoginSearchType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_LoginSearchTypeNameToValue = map[string]LoginSearchType{
			interface{}(LSTall).(fmt.Stringer).String():      LSTall,
			interface{}(LSTnoForms).(fmt.Stringer).String():  LSTnoForms,
			interface{}(LSTnoRealms).(fmt.Stringer).String(): LSTnoRealms,
		}
	}
}

// MarshalJSON is generated so LoginSearchType satisfies json.Marshaler.
func (r LoginSearchType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _LoginSearchTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid LoginSearchType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so LoginSearchType satisfies json.Unmarshaler.
func (r *LoginSearchType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("LoginSearchType should be a string, got %s", data)
	}
	v, ok := _LoginSearchTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid LoginSearchType %q", s)
	}
	*r = v
	return nil
}
