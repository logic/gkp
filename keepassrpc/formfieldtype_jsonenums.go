// generated by jsonenums -type=FormFieldType,LoginSearchType; DO NOT EDIT

package keepassrpc

import (
	"encoding/json"
	"fmt"
)

var (
	_FormFieldTypeNameToValue = map[string]FormFieldType{
		"FFTradio":    FFTradio,
		"FFTusername": FFTusername,
		"FFTtext":     FFTtext,
		"FFTpassword": FFTpassword,
		"FFTselect":   FFTselect,
		"FFTcheckbox": FFTcheckbox,
	}

	_FormFieldTypeValueToName = map[FormFieldType]string{
		FFTradio:    "FFTradio",
		FFTusername: "FFTusername",
		FFTtext:     "FFTtext",
		FFTpassword: "FFTpassword",
		FFTselect:   "FFTselect",
		FFTcheckbox: "FFTcheckbox",
	}
)

func init() {
	var v FormFieldType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_FormFieldTypeNameToValue = map[string]FormFieldType{
			interface{}(FFTradio).(fmt.Stringer).String():    FFTradio,
			interface{}(FFTusername).(fmt.Stringer).String(): FFTusername,
			interface{}(FFTtext).(fmt.Stringer).String():     FFTtext,
			interface{}(FFTpassword).(fmt.Stringer).String(): FFTpassword,
			interface{}(FFTselect).(fmt.Stringer).String():   FFTselect,
			interface{}(FFTcheckbox).(fmt.Stringer).String(): FFTcheckbox,
		}
	}
}

// MarshalJSON is generated so FormFieldType satisfies json.Marshaler.
func (r FormFieldType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _FormFieldTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid FormFieldType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so FormFieldType satisfies json.Unmarshaler.
func (r *FormFieldType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FormFieldType should be a string, got %s", data)
	}
	v, ok := _FormFieldTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid FormFieldType %q", s)
	}
	*r = v
	return nil
}
